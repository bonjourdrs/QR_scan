// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="QR_scan,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7s15ftgb196-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.408062,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=754,HLS_SYN_LUT=1682,HLS_VERSION=2018_2}" *)

module QR_scan (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imagein_V_address0,
        imagein_V_ce0,
        imagein_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] imagein_V_address0;
output   imagein_V_ce0;
input  [0:0] imagein_V_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] imagein_V_address0;
reg imagein_V_ce0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] next_mul_fu_348_p2;
reg   [11:0] next_mul_reg_1160;
wire    ap_CS_fsm_state2;
wire   [5:0] num_V_fu_360_p2;
reg   [5:0] num_V_reg_1168;
wire   [9:0] tmp_3_fu_370_p2;
reg   [9:0] tmp_3_reg_1173;
wire   [0:0] tmp_fu_354_p2;
wire   [9:0] tmp_5_fu_390_p2;
reg   [9:0] tmp_5_reg_1178;
wire  signed [7:0] j_V_2_cast_fu_448_p1;
reg  signed [7:0] j_V_2_cast_reg_1186;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_6_fu_404_p2;
wire   [8:0] r_V_fu_540_p2;
reg   [8:0] r_V_reg_1192;
wire   [9:0] rhs_V_1_cast8_fu_546_p1;
reg   [9:0] rhs_V_1_cast8_reg_1198;
wire   [10:0] rhs_V_1_cast_fu_550_p1;
reg   [10:0] rhs_V_1_cast_reg_1204;
wire   [9:0] rhs_V_2_cast7_fu_554_p1;
reg   [9:0] rhs_V_2_cast7_reg_1210;
wire   [10:0] rhs_V_2_cast_fu_558_p1;
reg   [10:0] rhs_V_2_cast_reg_1216;
wire   [9:0] rhs_V_3_cast6_fu_562_p1;
reg   [9:0] rhs_V_3_cast6_reg_1222;
wire   [10:0] rhs_V_3_cast_fu_566_p1;
reg   [10:0] rhs_V_3_cast_reg_1228;
wire   [9:0] rhs_V_4_cast5_fu_570_p1;
reg   [9:0] rhs_V_4_cast5_reg_1234;
wire   [10:0] rhs_V_4_cast_fu_574_p1;
reg   [10:0] rhs_V_4_cast_reg_1240;
wire   [9:0] rhs_V_5_cast4_fu_578_p1;
reg   [9:0] rhs_V_5_cast4_reg_1246;
wire   [10:0] rhs_V_5_cast_fu_582_p1;
reg   [10:0] rhs_V_5_cast_reg_1252;
wire   [9:0] rhs_V_6_cast3_fu_586_p1;
reg   [9:0] rhs_V_6_cast3_reg_1258;
wire   [10:0] rhs_V_6_cast_fu_590_p1;
reg   [10:0] rhs_V_6_cast_reg_1264;
wire   [5:0] idx_urem_fu_606_p3;
wire   [9:0] x_fu_627_p2;
reg   [9:0] x_reg_1278;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_9_fu_618_p2;
wire   [9:0] r_V_2_fu_632_p2;
reg   [9:0] r_V_2_reg_1284;
wire   [9:0] r_V_4_fu_637_p2;
reg   [9:0] r_V_4_reg_1289;
wire   [9:0] r_V_6_fu_642_p2;
reg   [9:0] r_V_6_reg_1294;
wire   [9:0] r_V_8_fu_647_p2;
reg   [9:0] r_V_8_reg_1299;
wire   [9:0] r_V_13_fu_652_p2;
reg   [9:0] r_V_13_reg_1304;
wire   [9:0] r_V_10_fu_657_p2;
reg   [9:0] r_V_10_reg_1309;
wire   [3:0] length_V_fu_662_p2;
wire   [18:0] tmp_10_fu_1076_p2;
reg   [18:0] tmp_10_reg_1319;
wire    ap_CS_fsm_state5;
wire   [18:0] tmp_11_fu_1082_p2;
reg   [18:0] tmp_11_reg_1336;
wire  signed [18:0] grp_fu_1088_p3;
reg  signed [18:0] tmp_12_reg_1341;
wire   [18:0] tmp_13_fu_1095_p2;
reg   [18:0] tmp_13_reg_1346;
wire  signed [18:0] grp_fu_1101_p3;
reg  signed [18:0] tmp_14_reg_1351;
wire   [18:0] tmp_15_fu_1108_p2;
reg   [18:0] tmp_15_reg_1356;
wire  signed [18:0] grp_fu_1114_p3;
reg  signed [18:0] tmp_16_reg_1361;
wire   [18:0] tmp_17_fu_1121_p2;
reg   [18:0] tmp_17_reg_1366;
wire  signed [18:0] grp_fu_1127_p3;
reg  signed [18:0] tmp_18_reg_1371;
wire   [18:0] tmp_19_fu_1134_p2;
reg   [18:0] tmp_19_reg_1376;
wire  signed [18:0] grp_fu_1140_p3;
reg  signed [18:0] tmp_21_reg_1381;
wire   [18:0] tmp_22_fu_1147_p2;
reg   [18:0] tmp_22_reg_1386;
wire  signed [18:0] grp_fu_1153_p3;
reg  signed [18:0] tmp_23_reg_1391;
wire   [9:0] y_fu_705_p2;
reg   [9:0] y_reg_1399;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_20_fu_696_p2;
reg   [17:0] imagein_V_addr_1_reg_1415;
reg   [17:0] imagein_V_addr_2_reg_1420;
reg   [17:0] imagein_V_addr_3_reg_1425;
reg   [17:0] imagein_V_addr_4_reg_1430;
reg   [17:0] imagein_V_addr_5_reg_1435;
reg   [17:0] imagein_V_addr_6_reg_1440;
reg   [17:0] imagein_V_addr_7_reg_1445;
reg   [17:0] imagein_V_addr_8_reg_1450;
reg   [17:0] imagein_V_addr_9_reg_1455;
reg   [17:0] imagein_V_addr_10_reg_1460;
reg   [17:0] imagein_V_addr_11_reg_1465;
reg   [17:0] imagein_V_addr_12_reg_1470;
wire   [7:0] i_V_1_fu_844_p2;
wire    ap_CS_fsm_state19;
wire   [10:0] lhs_V_1_cast_fu_868_p1;
reg   [10:0] lhs_V_1_cast_reg_1524;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire   [7:0] j_V_fu_1070_p2;
wire    ap_CS_fsm_state32;
reg   [5:0] t_V_reg_269;
reg   [11:0] phi_mul_reg_280;
reg   [5:0] r_V_12_reg_291;
reg   [3:0] t_V_1_reg_303;
reg   [7:0] t_V_2_reg_315;
reg   [7:0] t_V_3_reg_325;
reg   [0:0] agg_result_V_reg_335;
wire    ap_CS_fsm_state31;
wire  signed [63:0] tmp_47_cast_fu_719_p1;
wire  signed [63:0] tmp_48_cast_fu_729_p1;
wire  signed [63:0] tmp_49_cast_fu_739_p1;
wire  signed [63:0] tmp_50_cast_fu_749_p1;
wire  signed [63:0] tmp_51_cast_fu_759_p1;
wire  signed [63:0] tmp_52_cast_fu_769_p1;
wire  signed [63:0] tmp_53_cast_fu_779_p1;
wire  signed [63:0] tmp_54_cast_fu_789_p1;
wire  signed [63:0] tmp_55_cast_fu_799_p1;
wire  signed [63:0] tmp_56_cast_fu_809_p1;
wire  signed [63:0] tmp_57_cast_fu_819_p1;
wire  signed [63:0] tmp_58_cast_fu_829_p1;
wire  signed [63:0] tmp_59_cast_fu_839_p1;
wire  signed [63:0] tmp_60_cast_fu_863_p1;
wire  signed [63:0] tmp_61_cast_fu_885_p1;
wire  signed [63:0] tmp_62_cast_fu_903_p1;
wire  signed [63:0] tmp_63_cast_fu_921_p1;
wire  signed [63:0] tmp_64_cast_fu_939_p1;
wire  signed [63:0] tmp_65_cast_fu_957_p1;
wire  signed [63:0] tmp_66_cast_fu_975_p1;
wire  signed [63:0] tmp_67_cast_fu_993_p1;
wire  signed [63:0] tmp_68_cast_fu_1011_p1;
wire  signed [63:0] tmp_69_cast_fu_1029_p1;
wire  signed [63:0] tmp_70_cast_fu_1047_p1;
wire  signed [63:0] tmp_71_cast_fu_1065_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [5:0] tmp_3_fu_370_p0;
wire   [2:0] tmp_1_fu_376_p4;
wire   [2:0] tmp_5_fu_390_p0;
wire   [5:0] p_shl_fu_410_p3;
wire   [6:0] p_shl_cast_fu_418_p1;
wire   [6:0] t_V_1_cast2_fu_400_p1;
wire   [2:0] tmp_8_fu_428_p4;
wire   [6:0] tmp_8_cast_fu_438_p1;
wire   [6:0] tmp_7_fu_422_p2;
wire   [6:0] j_V_2_fu_442_p2;
wire   [3:0] mul3_fu_456_p0;
wire   [9:0] mul3_fu_456_p2;
wire   [2:0] tmp_4_fu_462_p4;
wire  signed [3:0] div_fu_472_p1;
wire   [4:0] t_V_1_cast1_fu_396_p1;
wire   [4:0] div_cast_fu_480_p1;
wire   [4:0] tmp_s_fu_496_p3;
wire   [6:0] div_cast9_fu_476_p1;
wire   [6:0] far5_V_fu_516_p2;
wire   [6:0] far6_V_fu_526_p2;
wire   [8:0] rhs_V_cast_fu_536_p1;
wire   [4:0] far1_V_fu_484_p2;
wire   [3:0] far2_V_fu_490_p2;
wire   [4:0] far3_V_fu_504_p2;
wire   [4:0] far4_V_fu_510_p2;
wire  signed [7:0] far5_V_cast_fu_522_p1;
wire  signed [7:0] far6_V_cast_fu_532_p1;
wire   [5:0] next_urem_fu_594_p2;
wire   [0:0] tmp_2_fu_600_p2;
wire   [8:0] tmp_1_cast_fu_614_p1;
wire   [9:0] tmp_10_cast_fu_623_p1;
wire   [8:0] tmp_24_cast_fu_692_p1;
wire   [9:0] tmp_26_cast_fu_701_p1;
wire   [18:0] tmp_21_cast_fu_710_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_24_fu_714_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_25_fu_724_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_26_fu_734_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_27_fu_744_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_28_fu_754_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_29_fu_764_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_30_fu_774_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_31_fu_784_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_32_fu_794_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_33_fu_804_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_34_fu_814_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_35_fu_824_p2;
(* use_dsp48 = "no" *) wire   [18:0] tmp_36_fu_834_p2;
wire   [9:0] r_V_14_fu_850_p2;
wire   [18:0] tmp_22_cast_fu_854_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_37_fu_858_p2;
wire   [10:0] r_V_15_fu_871_p2;
wire  signed [18:0] tmp_23_cast_fu_876_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_38_fu_880_p2;
wire   [9:0] r_V_16_fu_890_p2;
wire   [18:0] tmp_24_cast6_fu_894_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_39_fu_898_p2;
wire   [10:0] r_V_17_fu_908_p2;
wire  signed [18:0] tmp_25_cast_fu_912_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_40_fu_916_p2;
wire   [9:0] r_V_18_fu_926_p2;
wire   [18:0] tmp_26_cast5_fu_930_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_41_fu_934_p2;
wire   [10:0] r_V_19_fu_944_p2;
wire  signed [18:0] tmp_27_cast_fu_948_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_42_fu_952_p2;
wire   [9:0] r_V_20_fu_962_p2;
wire   [18:0] tmp_28_cast_fu_966_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_43_fu_970_p2;
wire   [10:0] r_V_21_fu_980_p2;
wire  signed [18:0] tmp_29_cast_fu_984_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_44_fu_988_p2;
wire   [9:0] r_V_22_fu_998_p2;
wire   [18:0] tmp_30_cast_fu_1002_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_45_fu_1006_p2;
wire   [10:0] r_V_23_fu_1016_p2;
wire  signed [18:0] tmp_31_cast_fu_1020_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_46_fu_1024_p2;
wire   [9:0] r_V_24_fu_1034_p2;
wire   [18:0] tmp_32_cast_fu_1038_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_47_fu_1042_p2;
wire   [10:0] r_V_25_fu_1052_p2;
wire  signed [18:0] tmp_33_cast_fu_1056_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_48_fu_1060_p2;
wire   [9:0] tmp_10_fu_1076_p0;
wire   [9:0] tmp_10_fu_1076_p1;
wire   [9:0] tmp_11_fu_1082_p0;
wire   [9:0] tmp_11_fu_1082_p1;
wire   [9:0] grp_fu_1088_p0;
wire   [10:0] lhs_V_cast_fu_671_p1;
wire   [4:0] grp_fu_1088_p1;
wire   [9:0] grp_fu_1088_p2;
wire   [9:0] tmp_13_fu_1095_p0;
wire   [9:0] tmp_13_fu_1095_p1;
wire   [9:0] grp_fu_1101_p0;
wire   [3:0] grp_fu_1101_p1;
wire   [9:0] grp_fu_1101_p2;
wire   [9:0] tmp_15_fu_1108_p0;
wire   [9:0] tmp_15_fu_1108_p1;
wire   [9:0] grp_fu_1114_p0;
wire   [4:0] grp_fu_1114_p1;
wire   [9:0] grp_fu_1114_p2;
wire   [9:0] tmp_17_fu_1121_p0;
wire   [9:0] tmp_17_fu_1121_p1;
wire   [9:0] grp_fu_1127_p0;
wire   [4:0] grp_fu_1127_p1;
wire   [9:0] grp_fu_1127_p2;
wire   [9:0] tmp_19_fu_1134_p0;
wire   [9:0] tmp_19_fu_1134_p1;
wire   [9:0] grp_fu_1140_p0;
wire   [7:0] grp_fu_1140_p1;
wire   [9:0] grp_fu_1140_p2;
wire   [9:0] tmp_22_fu_1147_p0;
wire   [9:0] tmp_22_fu_1147_p1;
wire   [9:0] grp_fu_1153_p0;
wire   [7:0] grp_fu_1153_p1;
wire   [9:0] grp_fu_1153_p2;
wire    ap_CS_fsm_state33;
reg   [32:0] ap_NS_fsm;
wire   [9:0] mul3_fu_456_p00;
wire   [18:0] tmp_10_fu_1076_p00;
wire   [18:0] tmp_11_fu_1082_p00;
wire   [18:0] tmp_13_fu_1095_p00;
wire   [18:0] tmp_15_fu_1108_p00;
wire   [18:0] tmp_17_fu_1121_p00;
wire   [18:0] tmp_19_fu_1134_p00;
wire   [18:0] tmp_22_fu_1147_p00;
wire   [9:0] tmp_3_fu_370_p00;
wire   [9:0] tmp_5_fu_390_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U1(
    .din0(tmp_10_fu_1076_p0),
    .din1(tmp_10_fu_1076_p1),
    .dout(tmp_10_fu_1076_p2)
);

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U2(
    .din0(tmp_11_fu_1082_p0),
    .din1(tmp_11_fu_1082_p1),
    .dout(tmp_11_fu_1082_p2)
);

QR_scan_am_submulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_am_submulcud_U3(
    .din0(grp_fu_1088_p0),
    .din1(grp_fu_1088_p1),
    .din2(grp_fu_1088_p2),
    .dout(grp_fu_1088_p3)
);

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U4(
    .din0(tmp_13_fu_1095_p0),
    .din1(tmp_13_fu_1095_p1),
    .dout(tmp_13_fu_1095_p2)
);

QR_scan_am_submuldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_am_submuldEe_U5(
    .din0(grp_fu_1101_p0),
    .din1(grp_fu_1101_p1),
    .din2(grp_fu_1101_p2),
    .dout(grp_fu_1101_p3)
);

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U6(
    .din0(tmp_15_fu_1108_p0),
    .din1(tmp_15_fu_1108_p1),
    .dout(tmp_15_fu_1108_p2)
);

QR_scan_am_submulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_am_submulcud_U7(
    .din0(grp_fu_1114_p0),
    .din1(grp_fu_1114_p1),
    .din2(grp_fu_1114_p2),
    .dout(grp_fu_1114_p3)
);

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U8(
    .din0(tmp_17_fu_1121_p0),
    .din1(tmp_17_fu_1121_p1),
    .dout(tmp_17_fu_1121_p2)
);

QR_scan_am_submulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_am_submulcud_U9(
    .din0(grp_fu_1127_p0),
    .din1(grp_fu_1127_p1),
    .din2(grp_fu_1127_p2),
    .dout(grp_fu_1127_p3)
);

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U10(
    .din0(tmp_19_fu_1134_p0),
    .din1(tmp_19_fu_1134_p1),
    .dout(tmp_19_fu_1134_p2)
);

QR_scan_am_submuleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_am_submuleOg_U11(
    .din0(grp_fu_1140_p0),
    .din1(grp_fu_1140_p1),
    .din2(grp_fu_1140_p2),
    .dout(grp_fu_1140_p3)
);

QR_scan_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_mul_mul_1bkb_U12(
    .din0(tmp_22_fu_1147_p0),
    .din1(tmp_22_fu_1147_p1),
    .dout(tmp_22_fu_1147_p2)
);

QR_scan_am_submuleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
QR_scan_am_submuleOg_U13(
    .din0(grp_fu_1153_p0),
    .din1(grp_fu_1153_p1),
    .din2(grp_fu_1153_p2),
    .dout(grp_fu_1153_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_V_reg_335 <= 1'd0;
    end else if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        agg_result_V_reg_335 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_280 <= next_mul_reg_1160;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_280 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_V_12_reg_291 <= idx_urem_fu_606_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_12_reg_291 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_303 <= 4'd3;
    end else if (((tmp_9_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_1_reg_303 <= length_V_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_fu_696_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_V_2_reg_315 <= i_V_1_fu_844_p2;
    end else if (((tmp_6_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_2_reg_315 <= j_V_2_cast_fu_448_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_3_reg_325 <= j_V_2_cast_reg_1186;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        t_V_3_reg_325 <= j_V_fu_1070_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_reg_269 <= num_V_reg_1168;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_269 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_fu_696_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        imagein_V_addr_10_reg_1460 <= tmp_57_cast_fu_819_p1;
        imagein_V_addr_11_reg_1465 <= tmp_58_cast_fu_829_p1;
        imagein_V_addr_12_reg_1470 <= tmp_59_cast_fu_839_p1;
        imagein_V_addr_1_reg_1415 <= tmp_48_cast_fu_729_p1;
        imagein_V_addr_2_reg_1420 <= tmp_49_cast_fu_739_p1;
        imagein_V_addr_3_reg_1425 <= tmp_50_cast_fu_749_p1;
        imagein_V_addr_4_reg_1430 <= tmp_51_cast_fu_759_p1;
        imagein_V_addr_5_reg_1435 <= tmp_52_cast_fu_769_p1;
        imagein_V_addr_6_reg_1440 <= tmp_53_cast_fu_779_p1;
        imagein_V_addr_7_reg_1445 <= tmp_54_cast_fu_789_p1;
        imagein_V_addr_8_reg_1450 <= tmp_55_cast_fu_799_p1;
        imagein_V_addr_9_reg_1455 <= tmp_56_cast_fu_809_p1;
        y_reg_1399 <= y_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_V_2_cast_reg_1186 <= j_V_2_cast_fu_448_p1;
        r_V_reg_1192 <= r_V_fu_540_p2;
        rhs_V_1_cast8_reg_1198[4 : 0] <= rhs_V_1_cast8_fu_546_p1[4 : 0];
        rhs_V_1_cast_reg_1204[4 : 0] <= rhs_V_1_cast_fu_550_p1[4 : 0];
        rhs_V_2_cast7_reg_1210[3 : 0] <= rhs_V_2_cast7_fu_554_p1[3 : 0];
        rhs_V_2_cast_reg_1216[3 : 0] <= rhs_V_2_cast_fu_558_p1[3 : 0];
        rhs_V_3_cast6_reg_1222[4 : 0] <= rhs_V_3_cast6_fu_562_p1[4 : 0];
        rhs_V_3_cast_reg_1228[4 : 0] <= rhs_V_3_cast_fu_566_p1[4 : 0];
        rhs_V_4_cast5_reg_1234[4 : 0] <= rhs_V_4_cast5_fu_570_p1[4 : 0];
        rhs_V_4_cast_reg_1240[4 : 0] <= rhs_V_4_cast_fu_574_p1[4 : 0];
        rhs_V_5_cast4_reg_1246[7 : 0] <= rhs_V_5_cast4_fu_578_p1[7 : 0];
        rhs_V_5_cast_reg_1252[7 : 0] <= rhs_V_5_cast_fu_582_p1[7 : 0];
        rhs_V_6_cast3_reg_1258[7 : 0] <= rhs_V_6_cast3_fu_586_p1[7 : 0];
        rhs_V_6_cast_reg_1264[7 : 0] <= rhs_V_6_cast_fu_590_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        lhs_V_1_cast_reg_1524[9 : 0] <= lhs_V_1_cast_fu_868_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_1160 <= next_mul_fu_348_p2;
        num_V_reg_1168 <= num_V_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_618_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_V_10_reg_1309 <= r_V_10_fu_657_p2;
        r_V_13_reg_1304 <= r_V_13_fu_652_p2;
        r_V_2_reg_1284 <= r_V_2_fu_632_p2;
        r_V_4_reg_1289 <= r_V_4_fu_637_p2;
        r_V_6_reg_1294 <= r_V_6_fu_642_p2;
        r_V_8_reg_1299 <= r_V_8_fu_647_p2;
        x_reg_1278 <= x_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_10_reg_1319 <= tmp_10_fu_1076_p2;
        tmp_11_reg_1336 <= tmp_11_fu_1082_p2;
        tmp_12_reg_1341 <= grp_fu_1088_p3;
        tmp_13_reg_1346 <= tmp_13_fu_1095_p2;
        tmp_14_reg_1351 <= grp_fu_1101_p3;
        tmp_15_reg_1356 <= tmp_15_fu_1108_p2;
        tmp_16_reg_1361 <= grp_fu_1114_p3;
        tmp_17_reg_1366 <= tmp_17_fu_1121_p2;
        tmp_18_reg_1371 <= grp_fu_1127_p3;
        tmp_19_reg_1376 <= tmp_19_fu_1134_p2;
        tmp_21_reg_1381 <= grp_fu_1140_p3;
        tmp_22_reg_1386 <= tmp_22_fu_1147_p2;
        tmp_23_reg_1391 <= grp_fu_1153_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_reg_1173[9 : 1] <= tmp_3_fu_370_p2[9 : 1];
        tmp_5_reg_1178[9 : 1] <= tmp_5_fu_390_p2[9 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        imagein_V_address0 = tmp_71_cast_fu_1065_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        imagein_V_address0 = tmp_70_cast_fu_1047_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        imagein_V_address0 = tmp_69_cast_fu_1029_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        imagein_V_address0 = tmp_68_cast_fu_1011_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        imagein_V_address0 = tmp_67_cast_fu_993_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        imagein_V_address0 = tmp_66_cast_fu_975_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        imagein_V_address0 = tmp_65_cast_fu_957_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        imagein_V_address0 = tmp_64_cast_fu_939_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        imagein_V_address0 = tmp_63_cast_fu_921_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        imagein_V_address0 = tmp_62_cast_fu_903_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        imagein_V_address0 = tmp_61_cast_fu_885_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        imagein_V_address0 = tmp_60_cast_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        imagein_V_address0 = imagein_V_addr_12_reg_1470;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        imagein_V_address0 = imagein_V_addr_11_reg_1465;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        imagein_V_address0 = imagein_V_addr_10_reg_1460;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        imagein_V_address0 = imagein_V_addr_9_reg_1455;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        imagein_V_address0 = imagein_V_addr_8_reg_1450;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        imagein_V_address0 = imagein_V_addr_7_reg_1445;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        imagein_V_address0 = imagein_V_addr_6_reg_1440;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        imagein_V_address0 = imagein_V_addr_5_reg_1435;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        imagein_V_address0 = imagein_V_addr_4_reg_1430;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        imagein_V_address0 = imagein_V_addr_3_reg_1425;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        imagein_V_address0 = imagein_V_addr_2_reg_1420;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        imagein_V_address0 = imagein_V_addr_1_reg_1415;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        imagein_V_address0 = tmp_47_cast_fu_719_p1;
    end else begin
        imagein_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state6))) begin
        imagein_V_ce0 = 1'b1;
    end else begin
        imagein_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_6_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_9_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_20_fu_696_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((imagein_V_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((imagein_V_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = agg_result_V_reg_335;

assign div_cast9_fu_476_p1 = $unsigned(div_fu_472_p1);

assign div_cast_fu_480_p1 = $unsigned(div_fu_472_p1);

assign div_fu_472_p1 = $signed(tmp_4_fu_462_p4);

assign far1_V_fu_484_p2 = (t_V_1_cast1_fu_396_p1 + div_cast_fu_480_p1);

assign far2_V_fu_490_p2 = ($signed(t_V_1_reg_303) - $signed(div_fu_472_p1));

assign far3_V_fu_504_p2 = (tmp_s_fu_496_p3 + div_cast_fu_480_p1);

assign far4_V_fu_510_p2 = (tmp_s_fu_496_p3 - div_cast_fu_480_p1);

assign far5_V_cast_fu_522_p1 = $signed(far5_V_fu_516_p2);

assign far5_V_fu_516_p2 = (tmp_7_fu_422_p2 + div_cast9_fu_476_p1);

assign far6_V_cast_fu_532_p1 = $signed(far6_V_fu_526_p2);

assign far6_V_fu_526_p2 = (tmp_7_fu_422_p2 - div_cast9_fu_476_p1);

assign grp_fu_1088_p0 = lhs_V_cast_fu_671_p1;

assign grp_fu_1088_p1 = rhs_V_1_cast_reg_1204;

assign grp_fu_1088_p2 = 19'd400;

assign grp_fu_1101_p0 = lhs_V_cast_fu_671_p1;

assign grp_fu_1101_p1 = rhs_V_2_cast_reg_1216;

assign grp_fu_1101_p2 = 19'd400;

assign grp_fu_1114_p0 = lhs_V_cast_fu_671_p1;

assign grp_fu_1114_p1 = rhs_V_3_cast_reg_1228;

assign grp_fu_1114_p2 = 19'd400;

assign grp_fu_1127_p0 = lhs_V_cast_fu_671_p1;

assign grp_fu_1127_p1 = rhs_V_4_cast_reg_1240;

assign grp_fu_1127_p2 = 19'd400;

assign grp_fu_1140_p0 = lhs_V_cast_fu_671_p1;

assign grp_fu_1140_p1 = rhs_V_5_cast_reg_1252;

assign grp_fu_1140_p2 = 19'd400;

assign grp_fu_1153_p0 = lhs_V_cast_fu_671_p1;

assign grp_fu_1153_p1 = rhs_V_6_cast_reg_1264;

assign grp_fu_1153_p2 = 19'd400;

assign i_V_1_fu_844_p2 = (t_V_2_reg_315 + 8'd1);

assign idx_urem_fu_606_p3 = ((tmp_2_fu_600_p2[0:0] === 1'b1) ? next_urem_fu_594_p2 : 6'd0);

assign j_V_2_cast_fu_448_p1 = $signed(j_V_2_fu_442_p2);

assign j_V_2_fu_442_p2 = (tmp_8_cast_fu_438_p1 + tmp_7_fu_422_p2);

assign j_V_fu_1070_p2 = (t_V_3_reg_325 + 8'd1);

assign length_V_fu_662_p2 = (t_V_1_reg_303 + 4'd1);

assign lhs_V_1_cast_fu_868_p1 = y_reg_1399;

assign lhs_V_cast_fu_671_p1 = x_reg_1278;

assign mul3_fu_456_p0 = mul3_fu_456_p00;

assign mul3_fu_456_p00 = t_V_1_reg_303;

assign mul3_fu_456_p2 = (mul3_fu_456_p0 * $signed('h1A));

assign next_mul_fu_348_p2 = (phi_mul_reg_280 + 12'd74);

assign next_urem_fu_594_p2 = (r_V_12_reg_291 + 6'd1);

assign num_V_fu_360_p2 = (t_V_reg_269 + 6'd1);

assign p_shl_cast_fu_418_p1 = p_shl_fu_410_p3;

assign p_shl_fu_410_p3 = {{t_V_1_reg_303}, {2'd0}};

assign r_V_10_fu_657_p2 = (rhs_V_6_cast3_reg_1258 + x_fu_627_p2);

assign r_V_13_fu_652_p2 = (rhs_V_5_cast4_reg_1246 + x_fu_627_p2);

assign r_V_14_fu_850_p2 = (rhs_V_1_cast8_reg_1198 + y_reg_1399);

assign r_V_15_fu_871_p2 = (lhs_V_1_cast_fu_868_p1 - rhs_V_1_cast_reg_1204);

assign r_V_16_fu_890_p2 = (rhs_V_2_cast7_reg_1210 + y_reg_1399);

assign r_V_17_fu_908_p2 = (lhs_V_1_cast_reg_1524 - rhs_V_2_cast_reg_1216);

assign r_V_18_fu_926_p2 = (rhs_V_3_cast6_reg_1222 + y_reg_1399);

assign r_V_19_fu_944_p2 = (lhs_V_1_cast_reg_1524 - rhs_V_3_cast_reg_1228);

assign r_V_20_fu_962_p2 = (rhs_V_4_cast5_reg_1234 + y_reg_1399);

assign r_V_21_fu_980_p2 = (lhs_V_1_cast_reg_1524 - rhs_V_4_cast_reg_1240);

assign r_V_22_fu_998_p2 = (rhs_V_5_cast4_reg_1246 + y_reg_1399);

assign r_V_23_fu_1016_p2 = (lhs_V_1_cast_reg_1524 - rhs_V_5_cast_reg_1252);

assign r_V_24_fu_1034_p2 = (rhs_V_6_cast3_reg_1258 + y_reg_1399);

assign r_V_25_fu_1052_p2 = (lhs_V_1_cast_reg_1524 - rhs_V_6_cast_reg_1264);

assign r_V_2_fu_632_p2 = (rhs_V_1_cast8_reg_1198 + x_fu_627_p2);

assign r_V_4_fu_637_p2 = (rhs_V_2_cast7_reg_1210 + x_fu_627_p2);

assign r_V_6_fu_642_p2 = (rhs_V_3_cast6_reg_1222 + x_fu_627_p2);

assign r_V_8_fu_647_p2 = (rhs_V_4_cast5_reg_1234 + x_fu_627_p2);

assign r_V_fu_540_p2 = (9'd100 - rhs_V_cast_fu_536_p1);

assign rhs_V_1_cast8_fu_546_p1 = far1_V_fu_484_p2;

assign rhs_V_1_cast_fu_550_p1 = far1_V_fu_484_p2;

assign rhs_V_2_cast7_fu_554_p1 = far2_V_fu_490_p2;

assign rhs_V_2_cast_fu_558_p1 = far2_V_fu_490_p2;

assign rhs_V_3_cast6_fu_562_p1 = far3_V_fu_504_p2;

assign rhs_V_3_cast_fu_566_p1 = far3_V_fu_504_p2;

assign rhs_V_4_cast5_fu_570_p1 = far4_V_fu_510_p2;

assign rhs_V_4_cast_fu_574_p1 = far4_V_fu_510_p2;

assign rhs_V_5_cast4_fu_578_p1 = $unsigned(far5_V_cast_fu_522_p1);

assign rhs_V_5_cast_fu_582_p1 = $unsigned(far5_V_cast_fu_522_p1);

assign rhs_V_6_cast3_fu_586_p1 = $unsigned(far6_V_cast_fu_532_p1);

assign rhs_V_6_cast_fu_590_p1 = $unsigned(far6_V_cast_fu_532_p1);

assign rhs_V_cast_fu_536_p1 = $unsigned(j_V_2_cast_fu_448_p1);

assign t_V_1_cast1_fu_396_p1 = t_V_1_reg_303;

assign t_V_1_cast2_fu_400_p1 = t_V_1_reg_303;

assign tmp_10_cast_fu_623_p1 = t_V_2_reg_315;

assign tmp_10_fu_1076_p0 = tmp_10_fu_1076_p00;

assign tmp_10_fu_1076_p00 = x_reg_1278;

assign tmp_10_fu_1076_p1 = 19'd400;

assign tmp_11_fu_1082_p0 = tmp_11_fu_1082_p00;

assign tmp_11_fu_1082_p00 = r_V_2_reg_1284;

assign tmp_11_fu_1082_p1 = 19'd400;

assign tmp_13_fu_1095_p0 = tmp_13_fu_1095_p00;

assign tmp_13_fu_1095_p00 = r_V_4_reg_1289;

assign tmp_13_fu_1095_p1 = 19'd400;

assign tmp_15_fu_1108_p0 = tmp_15_fu_1108_p00;

assign tmp_15_fu_1108_p00 = r_V_6_reg_1294;

assign tmp_15_fu_1108_p1 = 19'd400;

assign tmp_17_fu_1121_p0 = tmp_17_fu_1121_p00;

assign tmp_17_fu_1121_p00 = r_V_8_reg_1299;

assign tmp_17_fu_1121_p1 = 19'd400;

assign tmp_19_fu_1134_p0 = tmp_19_fu_1134_p00;

assign tmp_19_fu_1134_p00 = r_V_13_reg_1304;

assign tmp_19_fu_1134_p1 = 19'd400;

assign tmp_1_cast_fu_614_p1 = t_V_2_reg_315;

assign tmp_1_fu_376_p4 = {{phi_mul_reg_280[11:9]}};

assign tmp_20_fu_696_p2 = (($signed(tmp_24_cast_fu_692_p1) < $signed(r_V_reg_1192)) ? 1'b1 : 1'b0);

assign tmp_21_cast_fu_710_p1 = y_fu_705_p2;

assign tmp_22_cast_fu_854_p1 = r_V_14_fu_850_p2;

assign tmp_22_fu_1147_p0 = tmp_22_fu_1147_p00;

assign tmp_22_fu_1147_p00 = r_V_10_reg_1309;

assign tmp_22_fu_1147_p1 = 19'd400;

assign tmp_23_cast_fu_876_p1 = $signed(r_V_15_fu_871_p2);

assign tmp_24_cast6_fu_894_p1 = r_V_16_fu_890_p2;

assign tmp_24_cast_fu_692_p1 = t_V_3_reg_325;

assign tmp_24_fu_714_p2 = (tmp_10_reg_1319 + tmp_21_cast_fu_710_p1);

assign tmp_25_cast_fu_912_p1 = $signed(r_V_17_fu_908_p2);

assign tmp_25_fu_724_p2 = (tmp_11_reg_1336 + tmp_21_cast_fu_710_p1);

assign tmp_26_cast5_fu_930_p1 = r_V_18_fu_926_p2;

assign tmp_26_cast_fu_701_p1 = t_V_3_reg_325;

assign tmp_26_fu_734_p2 = ($signed(tmp_12_reg_1341) + $signed(tmp_21_cast_fu_710_p1));

assign tmp_27_cast_fu_948_p1 = $signed(r_V_19_fu_944_p2);

assign tmp_27_fu_744_p2 = (tmp_13_reg_1346 + tmp_21_cast_fu_710_p1);

assign tmp_28_cast_fu_966_p1 = r_V_20_fu_962_p2;

assign tmp_28_fu_754_p2 = ($signed(tmp_14_reg_1351) + $signed(tmp_21_cast_fu_710_p1));

assign tmp_29_cast_fu_984_p1 = $signed(r_V_21_fu_980_p2);

assign tmp_29_fu_764_p2 = (tmp_15_reg_1356 + tmp_21_cast_fu_710_p1);

assign tmp_2_fu_600_p2 = ((next_urem_fu_594_p2 < 6'd7) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_1002_p1 = r_V_22_fu_998_p2;

assign tmp_30_fu_774_p2 = ($signed(tmp_16_reg_1361) + $signed(tmp_21_cast_fu_710_p1));

assign tmp_31_cast_fu_1020_p1 = $signed(r_V_23_fu_1016_p2);

assign tmp_31_fu_784_p2 = (tmp_17_reg_1366 + tmp_21_cast_fu_710_p1);

assign tmp_32_cast_fu_1038_p1 = r_V_24_fu_1034_p2;

assign tmp_32_fu_794_p2 = ($signed(tmp_18_reg_1371) + $signed(tmp_21_cast_fu_710_p1));

assign tmp_33_cast_fu_1056_p1 = $signed(r_V_25_fu_1052_p2);

assign tmp_33_fu_804_p2 = (tmp_19_reg_1376 + tmp_21_cast_fu_710_p1);

assign tmp_34_fu_814_p2 = ($signed(tmp_21_reg_1381) + $signed(tmp_21_cast_fu_710_p1));

assign tmp_35_fu_824_p2 = (tmp_22_reg_1386 + tmp_21_cast_fu_710_p1);

assign tmp_36_fu_834_p2 = ($signed(tmp_23_reg_1391) + $signed(tmp_21_cast_fu_710_p1));

assign tmp_37_fu_858_p2 = (tmp_10_reg_1319 + tmp_22_cast_fu_854_p1);

assign tmp_38_fu_880_p2 = ($signed(tmp_10_reg_1319) + $signed(tmp_23_cast_fu_876_p1));

assign tmp_39_fu_898_p2 = (tmp_10_reg_1319 + tmp_24_cast6_fu_894_p1);

assign tmp_3_fu_370_p0 = tmp_3_fu_370_p00;

assign tmp_3_fu_370_p00 = r_V_12_reg_291;

assign tmp_3_fu_370_p2 = (tmp_3_fu_370_p0 * $signed('h32));

assign tmp_40_fu_916_p2 = ($signed(tmp_10_reg_1319) + $signed(tmp_25_cast_fu_912_p1));

assign tmp_41_fu_934_p2 = (tmp_10_reg_1319 + tmp_26_cast5_fu_930_p1);

assign tmp_42_fu_952_p2 = ($signed(tmp_10_reg_1319) + $signed(tmp_27_cast_fu_948_p1));

assign tmp_43_fu_970_p2 = (tmp_10_reg_1319 + tmp_28_cast_fu_966_p1);

assign tmp_44_fu_988_p2 = ($signed(tmp_10_reg_1319) + $signed(tmp_29_cast_fu_984_p1));

assign tmp_45_fu_1006_p2 = (tmp_10_reg_1319 + tmp_30_cast_fu_1002_p1);

assign tmp_46_fu_1024_p2 = ($signed(tmp_10_reg_1319) + $signed(tmp_31_cast_fu_1020_p1));

assign tmp_47_cast_fu_719_p1 = $signed(tmp_24_fu_714_p2);

assign tmp_47_fu_1042_p2 = (tmp_10_reg_1319 + tmp_32_cast_fu_1038_p1);

assign tmp_48_cast_fu_729_p1 = $signed(tmp_25_fu_724_p2);

assign tmp_48_fu_1060_p2 = ($signed(tmp_10_reg_1319) + $signed(tmp_33_cast_fu_1056_p1));

assign tmp_49_cast_fu_739_p1 = $signed(tmp_26_fu_734_p2);

assign tmp_4_fu_462_p4 = {{mul3_fu_456_p2[9:7]}};

assign tmp_50_cast_fu_749_p1 = $signed(tmp_27_fu_744_p2);

assign tmp_51_cast_fu_759_p1 = $signed(tmp_28_fu_754_p2);

assign tmp_52_cast_fu_769_p1 = $signed(tmp_29_fu_764_p2);

assign tmp_53_cast_fu_779_p1 = $signed(tmp_30_fu_774_p2);

assign tmp_54_cast_fu_789_p1 = $signed(tmp_31_fu_784_p2);

assign tmp_55_cast_fu_799_p1 = $signed(tmp_32_fu_794_p2);

assign tmp_56_cast_fu_809_p1 = $signed(tmp_33_fu_804_p2);

assign tmp_57_cast_fu_819_p1 = $signed(tmp_34_fu_814_p2);

assign tmp_58_cast_fu_829_p1 = $signed(tmp_35_fu_824_p2);

assign tmp_59_cast_fu_839_p1 = $signed(tmp_36_fu_834_p2);

assign tmp_5_fu_390_p0 = tmp_5_fu_390_p00;

assign tmp_5_fu_390_p00 = tmp_1_fu_376_p4;

assign tmp_5_fu_390_p2 = (tmp_5_fu_390_p0 * $signed('h32));

assign tmp_60_cast_fu_863_p1 = $signed(tmp_37_fu_858_p2);

assign tmp_61_cast_fu_885_p1 = $signed(tmp_38_fu_880_p2);

assign tmp_62_cast_fu_903_p1 = $signed(tmp_39_fu_898_p2);

assign tmp_63_cast_fu_921_p1 = $signed(tmp_40_fu_916_p2);

assign tmp_64_cast_fu_939_p1 = $signed(tmp_41_fu_934_p2);

assign tmp_65_cast_fu_957_p1 = $signed(tmp_42_fu_952_p2);

assign tmp_66_cast_fu_975_p1 = $signed(tmp_43_fu_970_p2);

assign tmp_67_cast_fu_993_p1 = $signed(tmp_44_fu_988_p2);

assign tmp_68_cast_fu_1011_p1 = $signed(tmp_45_fu_1006_p2);

assign tmp_69_cast_fu_1029_p1 = $signed(tmp_46_fu_1024_p2);

assign tmp_6_fu_404_p2 = ((t_V_1_reg_303 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_70_cast_fu_1047_p1 = $signed(tmp_47_fu_1042_p2);

assign tmp_71_cast_fu_1065_p1 = $signed(tmp_48_fu_1060_p2);

assign tmp_7_fu_422_p2 = (p_shl_cast_fu_418_p1 - t_V_1_cast2_fu_400_p1);

assign tmp_8_cast_fu_438_p1 = tmp_8_fu_428_p4;

assign tmp_8_fu_428_p4 = {{t_V_1_reg_303[3:1]}};

assign tmp_9_fu_618_p2 = (($signed(tmp_1_cast_fu_614_p1) < $signed(r_V_reg_1192)) ? 1'b1 : 1'b0);

assign tmp_fu_354_p2 = ((t_V_reg_269 < 6'd49) ? 1'b1 : 1'b0);

assign tmp_s_fu_496_p3 = {{t_V_1_reg_303}, {1'd0}};

assign x_fu_627_p2 = (tmp_10_cast_fu_623_p1 + tmp_3_reg_1173);

assign y_fu_705_p2 = (tmp_26_cast_fu_701_p1 + tmp_5_reg_1178);

always @ (posedge ap_clk) begin
    tmp_3_reg_1173[0] <= 1'b0;
    tmp_5_reg_1178[0] <= 1'b0;
    rhs_V_1_cast8_reg_1198[9:5] <= 5'b00000;
    rhs_V_1_cast_reg_1204[10:5] <= 6'b000000;
    rhs_V_2_cast7_reg_1210[9:4] <= 6'b000000;
    rhs_V_2_cast_reg_1216[10:4] <= 7'b0000000;
    rhs_V_3_cast6_reg_1222[9:5] <= 5'b00000;
    rhs_V_3_cast_reg_1228[10:5] <= 6'b000000;
    rhs_V_4_cast5_reg_1234[9:5] <= 5'b00000;
    rhs_V_4_cast_reg_1240[10:5] <= 6'b000000;
    rhs_V_5_cast4_reg_1246[9:8] <= 2'b00;
    rhs_V_5_cast_reg_1252[10:8] <= 3'b000;
    rhs_V_6_cast3_reg_1258[9:8] <= 2'b00;
    rhs_V_6_cast_reg_1264[10:8] <= 3'b000;
    lhs_V_1_cast_reg_1524[10] <= 1'b0;
end

endmodule //QR_scan
